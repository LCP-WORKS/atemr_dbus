
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__nm_client_glue_h__proxy__H__
#define __sdbuscpp__nm_client_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {

class NetworkManager_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.NetworkManager";

protected:
    NetworkManager_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~NetworkManager_proxy() = default;

public:
    std::tuple<sdbus::ObjectPath, sdbus::ObjectPath> AddAndActivateConnection(const std::map<std::string, std::map<std::string, sdbus::Variant>>& setting, const sdbus::ObjectPath& device, const sdbus::ObjectPath& specific_object)
    {
        std::tuple<sdbus::ObjectPath, sdbus::ObjectPath> result;
        proxy_.callMethod("AddAndActivateConnection").onInterface(INTERFACE_NAME).withArguments(setting, device, specific_object).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath ActivateConnection(const sdbus::ObjectPath& connection, const sdbus::ObjectPath& device, const sdbus::ObjectPath& specific_object)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("ActivateConnection").onInterface(INTERFACE_NAME).withArguments(connection, device, specific_object).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath GetDeviceByIpIface(const std::string& iface)
    {
        sdbus::ObjectPath result;
        proxy_.callMethod("GetDeviceByIpIface").onInterface(INTERFACE_NAME).withArguments(iface).storeResultsTo(result);
        return result;
    }

    uint32_t CheckConnectivity()
    {
        uint32_t result;
        proxy_.callMethod("CheckConnectivity").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

public:
    bool WirelessEnabled()
    {
        return proxy_.getProperty("WirelessEnabled").onInterface(INTERFACE_NAME);
    }

    void WirelessEnabled(const bool& value)
    {
        proxy_.setProperty("WirelessEnabled").onInterface(INTERFACE_NAME).toValue(value);
    }

    std::vector<sdbus::ObjectPath> ActiveConnections()
    {
        return proxy_.getProperty("ActiveConnections").onInterface(INTERFACE_NAME);
    }

    sdbus::ObjectPath PrimaryConnection()
    {
        return proxy_.getProperty("PrimaryConnection").onInterface(INTERFACE_NAME);
    }

    uint32_t State()
    {
        return proxy_.getProperty("State").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

namespace org {
namespace freedesktop {
namespace DBus {

class Properties_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.DBus.Properties";

protected:
    Properties_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Properties_proxy() = default;

public:
    sdbus::Variant Get(const std::string& interface_name, const std::string& property_name)
    {
        sdbus::Variant result;
        proxy_.callMethod("Get").onInterface(INTERFACE_NAME).withArguments(interface_name, property_name).storeResultsTo(result);
        return result;
    }

    void Set(const std::string& interface_name, const std::string& property_name, const sdbus::Variant& value)
    {
        proxy_.callMethod("Set").onInterface(INTERFACE_NAME).withArguments(interface_name, property_name, value);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
