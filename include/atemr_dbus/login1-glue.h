
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__login1_glue_h__proxy__H__
#define __sdbuscpp__login1_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace login1 {

class Manager_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.login1.Manager";

protected:
    Manager_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Manager_proxy() = default;

public:
    void PowerOff(const bool& arg_0)
    {
        proxy_.callMethod("PowerOff").onInterface(INTERFACE_NAME).withArguments(arg_0);
    }

    void Reboot(const bool& arg_0)
    {
        proxy_.callMethod("Reboot").onInterface(INTERFACE_NAME).withArguments(arg_0);
    }

    std::string CanPowerOff()
    {
        std::string result;
        proxy_.callMethod("CanPowerOff").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::string CanReboot()
    {
        std::string result;
        proxy_.callMethod("CanReboot").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
